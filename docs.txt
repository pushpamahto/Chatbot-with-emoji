üîç Research Summary: How Chatbots Work
Today, I researched how chatbots function by visiting multiple websites. Based on my findings, chatbots can be developed in two ways:

‚úÖ 1. With Code (Custom Chatbot):
Uses HTML, CSS, JavaScript (often with frameworks like React).

Backend logic with Node.js, Python, etc.

Gives full control over UI/UX and features.

Can integrate APIs (like OpenAI, Dialogflow).

‚úÖ 2. Without Code (No-code Platforms):
Tools like Tidio, ManyChat, Chatfuel.

Drag-and-drop flows.

Easy integration into websites via embed scripts.

Limited customization but quicker setup.




üí° Core Features a Chatbot Should Have:
Text-based communication

Emoji support

File attachment (images/docs)

Typing indicator (thinking dots)

Bot and user avatars

Send button & input box

Scroll/chat history

Responsive & styled layout











üß™ Today‚Äôs Implementation Work:
‚úÖ Chatbot UI Created With HTML + CSS:
Header with bot logo and name.

Message area with scrollable chat history.

Message input with styling.

Custom fonts added: Inter, Raleway.

Thinking indicator with animation.

Send button appears only when input is valid.

Focus state styling for better UI/UX.

‚úÖ Emoji Attachment Implementation (In Progress):
Tried implementing emoji picker and sending emojis.

Emoji not fully functional yet (sending part incomplete).

Plan: Add emoji button ‚Üí open picker ‚Üí append emoji to input field.

üßë‚Äçüé® CSS Styling Highlights:
Background gradient for better aesthetics.

Rounded borders and shadows for clean card layout.

Distinct colors for user and bot messages.

Hover effects for buttons.

üìå Next Steps:
Complete emoji send functionality.

Add file attachment support.

Integrate basic bot logic for replies.

Add responsiveness for smaller devices.

Refactor JavaScript (if any used) for message rendering.

üìÅ External Resources Used:
Google Fonts

Material Symbols

Research from: ChatGPT, YouTube tutorials, Medium articles.



 Final Note
I‚Äôm still working on completing full functionality. Meanwhile, I‚Äôve learned a lot about how chatbots can be created both with and without code, how important UI is, and how to approach new features step-by-step.




















Chatbot Implementation Documentation
Today's Learning Summary
Key Features Implemented:
Google Gemini API Integration

Used the free version of Gemini API for text and image processing

Implemented API calls to generate responses to user queries

Handled both text messages and image attachments

Emoji Picker Functionality

Added emoji-mart library for emoji selection

Implemented click-to-insert emoji feature in the message input

Created toggle functionality to show/hide emoji picker

File Attachment System

Added ability to upload images

Implemented preview of attached images

Added cancel button to remove attachments

Step-by-Step Implementation:
Chatbot UI Structure

Created toggle button to show/hide chatbot

Designed header with logo and close button

Built message display area with scrolling

Implemented footer with input field and controls

Message Handling

Set up outgoing message creation with user avatar

Added "thinking" animation for bot responses

Implemented smooth scrolling to new messages

API Integration

Configured API request options

Handled response parsing and error cases

Formatted bot responses by removing markdown syntax

Special Features

File upload with preview and cancel option

Emoji picker integration

Responsive design for mobile devices

Challenges Faced:
API Limitations

Free version has usage limits causing occasional overloads

Cannot fetch data from external URLs

Sometimes slow response times

Testing Observations

Works well for text analysis (word/letter counting)

Handles basic Q&A effectively

Image processing works but with some limitations

Key Learnings:
Frontend Development

Improved skills in creating interactive UI elements

Learned about smooth animations and transitions

Gained experience with responsive design

API Integration

Understood how to structure API requests

Learned to handle different response formats

Gained experience with error handling

Feature Implementation

Learned to implement emoji pickers

Gained experience with file upload handling

Improved understanding of chat interfaces